}
# obtain se for proportion 2012
prop_se(dat$TR_Italian_12, dat$TotalPop_12, dat$Italian_SE_12, dat$Pop_SE_12)
prop_se <- function(est_a,est_b,se_a,se_b){
# necessary variables
seA_sq <- se_a^2
seB_sq <- se_b^2
p <- nan_to_zero(est_a, est_b)
p_sq <- p^2
#conditions for formula
pro_se <- NA
# pro_se <- ifelse(p_sq * seB_sq < seA_sq, (1/est_b) * sqrt(seA_sq - (p_sq*seB_sq)),
#                  (1/est_b) * sqrt(seA_sq + (p_sq*seB_sq)))
#
pro_se <- if(p != 1 & (p_sq * seB_sq < seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq - (p_sq*seB_sq))
} else if(p != 1 & (p_sq * seB_sq > seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq + (p_sq*seB_sq))
} else if(p == 1){
pro_se <- se_a / est_b
} else {
pro_se <- NA
}
return(pro_se)
}
# obtain standard errors
SE_est <- data.frame(apply(dat[,c(6,8,13,15)],2,get_SE))
names(SE_est) <- c("Pop_SE_12", "Italian_SE_12", "Pop_SE_17", "Italian_SE_17")
dat <- cbind(dat, SE_est)
# obtain crit values for italian population
dat$italian_pop_crit_value <- abs(get_crit_value(est1=dat$TR_Italian_17, est2 = dat$TR_Italian_12, SE1 = dat$Italian_SE_17,
SE2 = dat$Italian_SE_12))
# difference in total reporting italian ancestry (2008-2012) v. (2013-2017) statistically significant?
dat$diff_tr_italian_ancestry_statistically_sig <- ifelse(dat$italian_pop_crit_value > 1.645, "stat sig", "not stat sig")
# create variable for proportion of Italians in 2012 and proportion of Italians in 2017
dat$pro_2012 <- nan_to_zero(dat$TR_Italian_12, dat$TotalPop_12)
dat$pro_2017 <- nan_to_zero(dat$TR_Italian_17, dat$TotalPop_17)
prop_se <- function(est_a,est_b,se_a,se_b){
# necessary variables
seA_sq <- se_a^2
seB_sq <- se_b^2
p <- nan_to_zero(est_a, est_b)
p_sq <- p^2
#conditions for formula
pro_se <- NA
pro_se <- if(p < 1 & (p_sq * seB_sq < seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq - (p_sq*seB_sq))
} else if(p < 1 & (p_sq * seB_sq > seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq + (p_sq*seB_sq))
} else if(p == 1){
pro_se <- se_a / est_b
} else {
pro_se <- NA
}
return(pro_se)
}
# obtain se for proportion 2012
prop_se(dat$TR_Italian_12, dat$TotalPop_12, dat$Italian_SE_12, dat$Pop_SE_12)
prop_se <- function(est_a,est_b,se_a,se_b){
# necessary variables
seA_sq <- se_a^2
seB_sq <- se_b^2
p <- nan_to_zero(est_a, est_b)
p_sq <- p^2
#conditions for formula
pro_se <- NA
pro_se <- if((p_sq * seB_sq) < seA_sq){
pro_se <- (1/est_b) * sqrt(seA_sq - (p_sq*seB_sq))
} else if((p_sq * seB_sq) > seA_sq){
pro_se <- (1/est_b) * sqrt(seA_sq + (p_sq*seB_sq))
} else if(p == 1){
pro_se <- se_a / est_b
} else {
pro_se <- NA
}
return(pro_se)
}
prop_se(dat$TR_Italian_12, dat$TotalPop_12, dat$Italian_SE_12, dat$Pop_SE_12)
prop_se <- function(est_a,est_b,se_a,se_b){
# necessary variables
seA_sq <- se_a^2
seB_sq <- se_b^2
p <- nan_to_zero(est_a, est_b)
p_sq <- p^2
#conditions for formula
pro_se <- NA
if(p < 1 & (p_sq * seB_sq < seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq - (p_sq*seB_sq))
} else if(p < 1 & (p_sq * seB_sq > seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq + (p_sq*seB_sq))
} else if(p == 1){
pro_se <- se_a / est_b
} else {
pro_se <- NA
}
return(pro_se)
}
prop_se <- function(est_a,est_b,se_a,se_b){
# necessary variables
seA_sq <- se_a^2
seB_sq <- se_b^2
p <- nan_to_zero(est_a, est_b)
p_sq <- p^2
#conditions for formula
pro_se <- NA
if(p < 1 & (p_sq * seB_sq < seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq - (p_sq*seB_sq))
} else if(p < 1 & (p_sq * seB_sq > seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq + (p_sq*seB_sq))
} else if(p == 1){
pro_se <- se_a / est_b
} else {
pro_se <- NA
}
return(pro_se)
}
Vectorize(prop_se)
k < - Vectorize(prop_se)
prop_se <- Vectorize(prop_se)
prop_se(dat$TR_Italian_12, dat$TotalPop_12, dat$Italian_SE_12, dat$Pop_SE_12)
rm(list=ls())
library(plyr)
library(tidyverse)
library(tidycensus)
dat <- read.csv("./it_nyc_2008_2017.csv")
#SE for pop_12
#SE for italian_12
#SE for pop_17
#SE for italian_17
get_SE <- function(MOE){
SE = MOE/1.645
return(SE)
}
get_crit_value <- function(est1,est2,SE1,SE2){
numerator <- est1-est2
SE1_squared <- (SE1)^2
SE2_squared <- (SE2)^2
denominator <- SE1_squared + SE2_squared
denominator <- sqrt(denominator)
crit <- (numerator)/(denominator)
return(crit)
}
nan_to_zero <- function(a,b){
res <- NA
res <- ifelse(a==0 & b ==0, 0, a/b)
return(res)
}
prop_se <- function(est_a,est_b,se_a,se_b){
# necessary variables
seA_sq <- se_a^2
seB_sq <- se_b^2
p <- nan_to_zero(est_a, est_b)
p_sq <- p^2
#conditions for formula
pro_se <- NA
if(p < 1 & (p_sq * seB_sq < seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq - (p_sq*seB_sq))
} else if(p < 1 & (p_sq * seB_sq > seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq + (p_sq*seB_sq))
} else if(p == 1){
pro_se <- se_a / est_b
} else {
pro_se <- NA
}
return(pro_se)
}
prop_se <- Vectorize(prop_se)
# obtain standard errors
SE_est <- data.frame(apply(dat[,c(6,8,13,15)],2,get_SE))
names(SE_est) <- c("Pop_SE_12", "Italian_SE_12", "Pop_SE_17", "Italian_SE_17")
dat <- cbind(dat, SE_est)
# obtain crit values for italian population
dat$italian_pop_crit_value <- abs(get_crit_value(est1=dat$TR_Italian_17, est2 = dat$TR_Italian_12, SE1 = dat$Italian_SE_17,
SE2 = dat$Italian_SE_12))
# difference in total reporting italian ancestry (2008-2012) v. (2013-2017) statistically significant?
dat$diff_tr_italian_ancestry_statistically_sig <- ifelse(dat$italian_pop_crit_value > 1.645, "stat sig", "not stat sig")
# create variable for proportion of Italians in 2012 and proportion of Italians in 2017
dat$pro_2012 <- nan_to_zero(dat$TR_Italian_12, dat$TotalPop_12)
dat$pro_2017 <- nan_to_zero(dat$TR_Italian_17, dat$TotalPop_17)
View(dat)
# obtain se for proportion 2012
dat$prop_se_2012<- prop_se(dat$TR_Italian_12, dat$TotalPop_12, dat$Italian_SE_12, dat$Pop_SE_12)
dat$prop_se_2017 <- prop_se(dat$TR_Italian_17, dat$TotalPop_17, dat$Italian_SE_17, dat$Pop_SE_17)
View(dat)
View(dat)
# obtain crit values for proportion
dat$prop_ital_crit <- (dat$pro_2017 - dat$pro_2012)/sqrt((dat$prop_se_2017)^2+ (dat$prop_se_2012)^2)
View(dat)
dat$prop_ital_sig <- ifelse(dat$prop_ital_crit > 1.645 | dat$prop_ital_crit < -1.645, "stat sig", "not stat sig")
View(dat)
table(dat$prop_ital_sig)
write.csv(dat, "it_nyc_2008_2017_est.csv")
write_csv(dat, "it_nyc_2008_2017_est.csv")
library(censusapi)
library(plyr)
library(tidyverse)
Sys.setenv(CENSUS_KEY= '6266a93443753a9bc219aaa0a4f501ab40ab164f')
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_KEY")
# list all available apis
APIs <- listCensusApis()
# state codes: https://www2.census.gov/programs-surveys/acs/tech_docs/pums/data_dict/PUMSDataDict13.txt
# list of variables to call in API
# main = https://www.census.gov/data/developers/data-sets/acs-5year.2013.html
# 2005-2009 - https://api.census.gov/data/2009/acs5/variables.html (2005-2009)
# 2006-2010 - https://api.census.gov/data/2010/acs/acs5/variables.html
# 2007-2011 - https://api.census.gov/data/2011/acs/acs5/variables.html
# 2008-2012 - https://api.census.gov/data/2012/acs/acs5/variables.html
# 2013-2017 - https://api.census.gov/data/2017/acs/acs5/variables.html
# Variables to use
# NAME - Name of Census Tract
# B01003_001E - Total Population of Census Tract
# B04004_051E - People Reporting Single Ancestry (Full)
# B04005_051E - People Reporting Multiple Ancestry (Partial)
# B04006_051E - People Reporting Ancestry (Total)
# Things to know
# You can compare non overlapping ACS datasets
# Can also compare census estimates to ACS, but can only use 1980,1990, and 2000 census bc
# it was a short form census in 2010
# Comparing ACS to 2000 Census may be harder than expected :(
# Statistical signficance of ACS Estimates
# - https://www.census.gov/content/dam/Census/library/publications/2018/acs/acs_general_handbook_2018_ch07.pdf
#  Statistical significance means that there is strong statistical evidence
#  that a true difference exists within the full population
#  SE =MOE/1.645
#  1. Calculate the SEs for both estimates
#  2. Square the resulting SE for each estimate
#  3. Sum the squared SEs
#  4. Calculate the square root of the sum of the squared SE
#  5. Divde the difference between the two ACS estimates by the square root of the sum of the squared SEs
#  6. Compare abs value of this calculation to the critical value for level of confidence.
#  7. If abs value is greater than crit value than the difference between the two estimates is stat significant
#   abs(est1 - est2/sqrt(SE(x1)^2 +SE(x2)^2)) > Zcl
get_italian_ny_est <- function(acs_nm, yr){
est <- getCensus(name = acs_nm,
vintage = yr,
vars = c("NAME",
"B01003_001E", "B01003_001M",
"B04006_051E", "B04006_051M"),
region = "tract:*",
regionin = "state:36")
return(est)
}
change_names <- function(x,y){
colhds<- c("TotalPop", "TotalPopMOE", "TR_Italian", "TR_ItalianMOE")
names(x)[5:8] <- colhds
names(x)[5:8] <- paste(names(x)[5:8], y, sep = "_")
return(x)
}
create_census_cols <- function(x){
list_names <- stringr::str_split(string = x[,"NAME"], ",")
list_namesdf <- lapply(list_names, function(k) data.frame(as.list(k)))
list_namesdf <- lapply(list_namesdf, setNames, nm = c("Census_Tract", "County", "State"))
list_namesdf <- plyr::rbind.fill(list_namesdf)
x <- cbind(x, list_namesdf)
x[9:11] <- apply(x[9:11], 2, as.character)
x[9:11] <- apply(x[9:11], 2, trimws)
return(x)
}
# get estimates
est_2008_2012 <- get_italian_ny_est("acs/acs5", 2012)
est_2013_2017 <- get_italian_ny_est("acs/acs5", 2017)
# change column name estimates
est_2008_2012 <- change_names(est_2008_2012, "12")
est_2013_2017 <- change_names(est_2013_2017, "17")
# create new columns
est_2008_2012 <- create_census_cols(est_2008_2012)
est_2013_2017 <- create_census_cols(est_2013_2017)
View(est_2013_2017)
library(censusapi)
library(plyr)
library(tidyverse)
Sys.setenv(CENSUS_KEY= '6266a93443753a9bc219aaa0a4f501ab40ab164f')
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_KEY")
# list all available apis
APIs <- listCensusApis()
# state codes: https://www2.census.gov/programs-surveys/acs/tech_docs/pums/data_dict/PUMSDataDict13.txt
# list of variables to call in API
# main = https://www.census.gov/data/developers/data-sets/acs-5year.2013.html
# 2005-2009 - https://api.census.gov/data/2009/acs5/variables.html (2005-2009)
# 2006-2010 - https://api.census.gov/data/2010/acs/acs5/variables.html
# 2007-2011 - https://api.census.gov/data/2011/acs/acs5/variables.html
# 2008-2012 - https://api.census.gov/data/2012/acs/acs5/variables.html
# 2013-2017 - https://api.census.gov/data/2017/acs/acs5/variables.html
# Variables to use
# NAME - Name of Census Tract
# B01003_001E - Total Population of Census Tract
# B04004_051E - People Reporting Single Ancestry (Full)
# B04005_051E - People Reporting Multiple Ancestry (Partial)
# B04006_051E - People Reporting Ancestry (Total)
# Things to know
# You can compare non overlapping ACS datasets
# Can also compare census estimates to ACS, but can only use 1980,1990, and 2000 census bc
# it was a short form census in 2010
# Comparing ACS to 2000 Census may be harder than expected :(
# Statistical signficance of ACS Estimates
# - https://www.census.gov/content/dam/Census/library/publications/2018/acs/acs_general_handbook_2018_ch07.pdf
#  Statistical significance means that there is strong statistical evidence
#  that a true difference exists within the full population
#  SE =MOE/1.645
#  1. Calculate the SEs for both estimates
#  2. Square the resulting SE for each estimate
#  3. Sum the squared SEs
#  4. Calculate the square root of the sum of the squared SE
#  5. Divde the difference between the two ACS estimates by the square root of the sum of the squared SEs
#  6. Compare abs value of this calculation to the critical value for level of confidence.
#  7. If abs value is greater than crit value than the difference between the two estimates is stat significant
#   abs(est1 - est2/sqrt(SE(x1)^2 +SE(x2)^2)) > Zcl
get_italian_ny_est <- function(acs_nm, yr){
est <- getCensus(name = acs_nm,
vintage = yr,
vars = c("NAME",
"B01003_001E", "B01003_001M",
"B04006_051E", "B04006_051M"),
region = "tract:*",
regionin = "state:36")
return(est)
}
change_names <- function(x,y){
colhds<- c("TotalPop", "TotalPopMOE", "TR_Italian", "TR_ItalianMOE")
names(x)[5:8] <- colhds
names(x)[5:8] <- paste(names(x)[5:8], y, sep = "_")
return(x)
}
create_census_cols <- function(x){
list_names <- stringr::str_split(string = x[,"NAME"], ",")
list_namesdf <- lapply(list_names, function(k) data.frame(as.list(k)))
list_namesdf <- lapply(list_namesdf, setNames, nm = c("Census_Tract", "County", "State"))
list_namesdf <- plyr::rbind.fill(list_namesdf)
x <- cbind(x, list_namesdf)
x[9:11] <- apply(x[9:11], 2, as.character)
x[9:11] <- apply(x[9:11], 2, trimws)
return(x)
}
# get estimates
est_2008_2012 <- get_italian_ny_est("acs/acs5", 2012)
est_2013_2017 <- get_italian_ny_est("acs/acs5", 2017)
# change column name estimates
est_2008_2012 <- change_names(est_2008_2012, "12")
est_2013_2017 <- change_names(est_2013_2017, "17")
# create new columns
est_2008_2012 <- create_census_cols(est_2008_2012)
est_2013_2017 <- create_census_cols(est_2013_2017)
# filter both datasets for NYC counties
est_2008_2012 <- est_2008_2012 %>%
filter(County %in% c("Bronx County", "Kings County",
"New York County", "Queens County",
"Richmond County"))
est_2013_2017 <- est_2013_2017 %>%
filter(County %in% c("Bronx County", "Kings County",
"New York County", "Queens County",
"Richmond County"))
View(est_2013_2017)
library(censusapi)
library(plyr)
library(tidyverse)
Sys.setenv(CENSUS_KEY= '6266a93443753a9bc219aaa0a4f501ab40ab164f')
readRenviron("~/.Renviron")
Sys.getenv("CENSUS_KEY")
# list all available apis
APIs <- listCensusApis()
# state codes: https://www2.census.gov/programs-surveys/acs/tech_docs/pums/data_dict/PUMSDataDict13.txt
# list of variables to call in API
# main = https://www.census.gov/data/developers/data-sets/acs-5year.2013.html
# 2005-2009 - https://api.census.gov/data/2009/acs5/variables.html (2005-2009)
# 2006-2010 - https://api.census.gov/data/2010/acs/acs5/variables.html
# 2007-2011 - https://api.census.gov/data/2011/acs/acs5/variables.html
# 2008-2012 - https://api.census.gov/data/2012/acs/acs5/variables.html
# 2013-2017 - https://api.census.gov/data/2017/acs/acs5/variables.html
# Variables to use
# NAME - Name of Census Tract
# B01003_001E - Total Population of Census Tract
# B04004_051E - People Reporting Single Ancestry (Full)
# B04005_051E - People Reporting Multiple Ancestry (Partial)
# B04006_051E - People Reporting Ancestry (Total)
# Things to know
# You can compare non overlapping ACS datasets
# Can also compare census estimates to ACS, but can only use 1980,1990, and 2000 census bc
# it was a short form census in 2010
# Comparing ACS to 2000 Census may be harder than expected :(
# Statistical signficance of ACS Estimates
# - https://www.census.gov/content/dam/Census/library/publications/2018/acs/acs_general_handbook_2018_ch07.pdf
#  Statistical significance means that there is strong statistical evidence
#  that a true difference exists within the full population
#  SE =MOE/1.645
#  1. Calculate the SEs for both estimates
#  2. Square the resulting SE for each estimate
#  3. Sum the squared SEs
#  4. Calculate the square root of the sum of the squared SE
#  5. Divde the difference between the two ACS estimates by the square root of the sum of the squared SEs
#  6. Compare abs value of this calculation to the critical value for level of confidence.
#  7. If abs value is greater than crit value than the difference between the two estimates is stat significant
#   abs(est1 - est2/sqrt(SE(x1)^2 +SE(x2)^2)) > Zcl
get_italian_ny_est <- function(acs_nm, yr){
est <- getCensus(name = acs_nm,
vintage = yr,
vars = c("NAME",
"B01003_001E", "B01003_001M",
"B04006_051E", "B04006_051M"),
region = "tract:*",
regionin = "state:36")
return(est)
}
change_names <- function(x,y){
colhds<- c("TotalPop", "TotalPopMOE", "TR_Italian", "TR_ItalianMOE")
names(x)[5:8] <- colhds
names(x)[5:8] <- paste(names(x)[5:8], y, sep = "_")
return(x)
}
create_census_cols <- function(x){
list_names <- stringr::str_split(string = x[,"NAME"], ",")
list_namesdf <- lapply(list_names, function(k) data.frame(as.list(k)))
list_namesdf <- lapply(list_namesdf, setNames, nm = c("Census_Tract", "County", "State"))
list_namesdf <- plyr::rbind.fill(list_namesdf)
x <- cbind(x, list_namesdf)
x[9:11] <- apply(x[9:11], 2, as.character)
x[9:11] <- apply(x[9:11], 2, trimws)
return(x)
}
# get estimates
est_2008_2012 <- get_italian_ny_est("acs/acs5", 2012)
est_2013_2017 <- get_italian_ny_est("acs/acs5", 2017)
# change column name estimates
est_2008_2012 <- change_names(est_2008_2012, "12")
est_2013_2017 <- change_names(est_2013_2017, "17")
# create new columns
est_2008_2012 <- create_census_cols(est_2008_2012)
est_2013_2017 <- create_census_cols(est_2013_2017)
# filter both datasets for NYC counties
est_2008_2012 <- est_2008_2012 %>%
filter(County %in% c("Bronx County", "Kings County",
"New York County", "Queens County",
"Richmond County"))
est_2013_2017 <- est_2013_2017 %>%
filter(County %in% c("Bronx County", "Kings County",
"New York County", "Queens County",
"Richmond County"))
# join two datasets together by state, county, tract
est_2008_2017 <-left_join(est_2008_2012, est_2013_2017, by = c("state", "county", "tract"))
# delete duplicate columns
est_2008_2017<-est_2008_2017[,-c(12,17:19)]
# write full dataset to csv
write_csv(est_2008_2017, "it_nyc_2008_2017.csv")
rm(list=ls())
library(plyr)
library(tidyverse)
library(tidycensus)
dat <- read.csv("./it_nyc_2008_2017.csv")
#SE for pop_12
#SE for italian_12
#SE for pop_17
#SE for italian_17
get_SE <- function(MOE){
SE = MOE/1.645
return(SE)
}
get_crit_value <- function(est1,est2,SE1,SE2){
numerator <- est1-est2
SE1_squared <- (SE1)^2
SE2_squared <- (SE2)^2
denominator <- SE1_squared + SE2_squared
denominator <- sqrt(denominator)
crit <- (numerator)/(denominator)
return(crit)
}
nan_to_zero <- function(a,b){
res <- NA
res <- ifelse(a==0 & b ==0, 0, a/b)
return(res)
}
prop_se <- function(est_a,est_b,se_a,se_b){
# necessary variables
seA_sq <- se_a^2
seB_sq <- se_b^2
p <- nan_to_zero(est_a, est_b)
p_sq <- p^2
#conditions for formula
pro_se <- NA
if(p < 1 & (p_sq * seB_sq < seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq - (p_sq*seB_sq))
} else if(p < 1 & (p_sq * seB_sq > seA_sq)){
pro_se <- (1/est_b) * sqrt(seA_sq + (p_sq*seB_sq))
} else if(p == 1){
pro_se <- se_a / est_b
} else {
pro_se <- NA
}
return(pro_se)
}
prop_se <- Vectorize(prop_se)
# obtain standard errors
SE_est <- data.frame(apply(dat[,c(6,8,13,15)],2,get_SE))
names(SE_est) <- c("Pop_SE_12", "Italian_SE_12", "Pop_SE_17", "Italian_SE_17")
dat <- cbind(dat, SE_est)
# obtain crit values for italian population
dat$italian_pop_crit_value <- abs(get_crit_value(est1=dat$TR_Italian_17, est2 = dat$TR_Italian_12, SE1 = dat$Italian_SE_17,
SE2 = dat$Italian_SE_12))
# difference in total reporting italian ancestry (2008-2012) v. (2013-2017) statistically significant?
dat$diff_tr_italian_ancestry_statistically_sig <- ifelse(dat$italian_pop_crit_value > 1.645, "stat sig", "not stat sig")
# create variable for proportion of Italians in 2012 and proportion of Italians in 2017
dat$pro_2012 <- nan_to_zero(dat$TR_Italian_12, dat$TotalPop_12)
dat$pro_2017 <- nan_to_zero(dat$TR_Italian_17, dat$TotalPop_17)
# obtain se for proportion 2012 + 2017
dat$prop_se_2012 <- prop_se(dat$TR_Italian_12, dat$TotalPop_12, dat$Italian_SE_12, dat$Pop_SE_12)
dat$prop_se_2017 <- prop_se(dat$TR_Italian_17, dat$TotalPop_17, dat$Italian_SE_17, dat$Pop_SE_17)
# obtain crit values for proportion
dat$prop_ital_crit <- (dat$pro_2017 - dat$pro_2012)/sqrt((dat$prop_se_2017)^2+ (dat$prop_se_2012)^2)
dat$prop_ital_sig <- ifelse(dat$prop_ital_crit > 1.645 | dat$prop_ital_crit < -1.645, "stat sig", "not stat sig")
View(dat)
write_csv(dat, "it_nyc_2008_2017_est.csv")
View(dat)
